generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Listing {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  name           String          @db.VarChar
  price          String
  images         String[]
  condition      String
  boxCondition   String
  canTrade       Boolean
  size           String
  description    String
  listingDefects String[]
  published      Boolean         @default(false)
  ownerId        String
  sold           Boolean         @default(false)
  gender         String
  owner          User            @relation(fields: [ownerId], references: [uid])
  offers         Offer[]
  tradeListings  Trade_Listing[]
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  firstName       String?
  lastName        String?
  sellerName      String?   @unique
  userImage       String?
  description     String?
  uid             String    @unique @db.VarChar
  accountId       String?   @unique
  chargesEnabled  Boolean   @default(false)
  listings        Listing[]
  address         String?
  optionalAddress String?
  city            String?
  state           String?
  zipcode         String?
  country         String?
  customerId      String?
  paymentMethodId String?
  BuyerOffers     Offer[]   @relation(name: "buyerOffer")
  SellerOffers    Offer[]   @relation(name: "sellerOffer")
  BuyerTrades     Trade[]   @relation(name: "buyerTrade")
  SellerTrades    Trade[]   @relation(name: "sellerTrade")
}

model Offer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  listingId Int
  listing   Listing  @relation(fields: [listingId], references: [id])
  buyerId   String
  Buyer     User     @relation(name: "buyerOffer", fields: [buyerId], references: [uid])
  sellerId  String
  Seller    User     @relation(name: "sellerOffer", fields: [sellerId], references: [uid])
  price     String
  accepted  Boolean  @default(false)
  cancelled Boolean  @default(false)
}

model Trade {
  id                    Int             @id @default(autoincrement())
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  buyerId               String
  Buyer                 User            @relation(name: "buyerTrade", fields: [buyerId], references: [uid])
  sellerId              String
  Seller                User            @relation(name: "sellerTrade", fields: [sellerId], references: [uid])
  additionalFundsBuyer  String?
  additionalFundsSeller String?
  accepted              Boolean         @default(false)
  cancelled             Boolean         @default(false)
  tradeListings         Trade_Listing[]
}

model Trade_Listing {
  tradeId   Int
  listingId Int
  Trade     Trade   @relation(fields: [tradeId], references: [id])
  Listing   Listing @relation(fields: [listingId], references: [id])
  direction Direction

  @@id([tradeId, listingId])
}

enum Direction {
  SELLER
  BUYER
}